/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import { Erc20 } from "./typechain/Erc20";
import { Erc20Factory } from "./typechain/Erc20Factory";
import GreeterDeployment from "./deployments/localhost/Greeter.json";
import { Greeter } from "./typechain/Greeter";
import { GreeterFactory } from "./typechain/GreeterFactory";
import { Token } from "./typechain/Token";
import { TokenFactory } from "./typechain/TokenFactory";

export const emptyContract = {
    instance: undefined,
    factory: undefined
};
export const defaultProvider: providers.Provider = ethers.providers.getDefaultProvider();
export const ProviderContext = React.createContext<[providers.Provider, React.Dispatch<React.SetStateAction<providers.Provider>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
export const ERC20Context = React.createContext<SymfoniErc20>(emptyContract);
export const GreeterContext = React.createContext<SymfoniGreeter>(emptyContract);
export const TokenContext = React.createContext<SymfoniToken>(emptyContract);

export interface BuidlerSymfoniReactProps {
}

export interface SymfoniErc20 {
    instance?: Erc20;
    factory?: Erc20Factory;
}

export interface SymfoniGreeter {
    instance?: Greeter;
    factory?: GreeterFactory;
}

export interface SymfoniToken {
    instance?: Token;
    factory?: TokenFactory;
}

export const BuidlerContext: React.FC<BuidlerSymfoniReactProps> = (props) => {
    const [ready, setReady] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [/* providerName */, setProviderName] = useState<string>();
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const getProvider = async (): Promise<providers.Provider | undefined> => {
        const provider = await providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce

        return provider;
    };
    const [ERC20, setERC20] = useState<SymfoniErc20>(emptyContract);
    const [Greeter, setGreeter] = useState<SymfoniGreeter>(emptyContract);
    const [Token, setToken] = useState<SymfoniToken>(emptyContract);
    const providerPriority = ["web3modal"];
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {};
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: true,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };
    useEffect(() => {
        console.debug(messages.pop())
    }, [messages])
    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            setMessages(old => [...old, "Initiating Buidler React"])
            const _provider = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094
            if (subscribed && _provider) {
                const _providerName = _provider.constructor.name;
                console.debug("_providerName", _providerName)
                setProvider(_provider)
                setProviderName(_providerName)
                setMessages(old => [...old, "Useing provider: " + _providerName])
                let _signer;
                if (_providerName === "Web3Provider") {
                    const web3provider = _provider as ethers.providers.Web3Provider
                    _signer = await web3provider.getSigner()
                    console.debug("_signer", _signer)
                    if (subscribed && _signer) {
                        setSigner(_signer)
                        const address = await _signer.getAddress()
                        if (subscribed && address) {
                            console.debug("address", address)
                            setCurrentAddress(address)
                        }
                    }
                }

                setERC20(getERC20(_provider, _signer))
                setGreeter(getGreeter(_provider, _signer))
                setToken(getToken(_provider, _signer))

                setReady(true)
            }
        };
        doAsync();
        return () => { subscribed = false }
    }, [])

    const getERC20 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniErc20 = {
            instance: instance,
            factory: _signer ? new Erc20Factory(_signer) : undefined,
        }
        return contract
    };
    const getGreeter = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = GreeterDeployment.receipt.contractAddress
        const instance = _signer ? GreeterFactory.connect(contractAddress, _signer) : GreeterFactory.connect(contractAddress, _provider)
        const contract: SymfoniGreeter = {
            instance: instance,
            factory: _signer ? new GreeterFactory(_signer) : undefined,
        }
        return contract
    };
    const getToken = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniToken = {
            instance: instance,
            factory: _signer ? new TokenFactory(_signer) : undefined,
        }
        return contract
    };
    return (
        <ProviderContext.Provider value={[provider, setProvider]}>
            <SignerContext.Provider value={[signer, setSigner]}>
                <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                    <ERC20Context.Provider value={ERC20}>
                        <GreeterContext.Provider value={Greeter}>
                            <TokenContext.Provider value={Token}>
                                {ready &&
                                    (props.children)
                                }
                                {!ready &&
                                    <div>
                                        {messages.map((msg, i) => (
                                            <p key={i}>{msg}</p>
                                        ))}
                                    </div>
                                }
                            </TokenContext.Provider >
                        </GreeterContext.Provider >
                    </ERC20Context.Provider >
                </CurrentAddressContext.Provider>
            </SignerContext.Provider>
        </ProviderContext.Provider>
    )
};
